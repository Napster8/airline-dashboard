# Location of app.py

# app.py

import config 
from taipy import Gui
from data.data_processing import run_dbt, setup_bigquery_client
from pages.overview_page.overview_page import Overview
from pages.marketing_page.marketing_page import Marketing
from pages.root import Root

setup_bigquery_client() # step 1
# run_dbt() # step 2

# Page Structure
pages = {
    "/": Root,  # Root page redirects to overview
    "overview": Overview,
    "marketing": Marketing
}

gui = Gui(pages=pages)

if __name__ == "__main__":
    gui.run(title="Airline Dashboard", port=5000)
--- End of app.py ---

# Location of config.py

# config.py

from taipy import Config

PROJECT_ID = "airline-438510"
DATASET_ID = "airlines"
DBT_DATASET = f"{PROJECT_ID}.{DATASET_ID}"

# Configure the GUI
Config.configure_gui(
    name="Airline Dashboard",
    description="An overview and marketing dashboard for Airline Firm.",
    author="Raghavendra Tapas",
)

# Configure global application settings
Config.configure_global_app(
    dark_mode=False,
    navigation=True,
)

--- End of config.py ---

# Location of directory_structure.py

import os

def print_directory_structure(root_dir, output_file):
    with open(output_file, 'w', encoding='utf-8') as file:
        for root, dirs, files in os.walk(root_dir):
            # Calculate the indentation level
            level = root.replace(root_dir, '').count(os.sep)
            indent = ' ' * 4 * level
            # Write the directory name
            file.write(f"{indent}{os.path.basename(root)}/\n")
            # Write the file names
            sub_indent = ' ' * 4 * (level + 1)
            for f in files:
                file.write(f"{sub_indent}{f}\n")

if __name__ == "__main__":
    # Get the directory where this script is located
    script_directory = os.path.dirname(os.path.abspath(__file__))
    
    # Specify the output text file path (placed in the same directory)
    output_text_file = os.path.join(script_directory, "directory_structure.txt")
    
    print_directory_structure(script_directory, output_text_file)
    print(f"Directory structure of '{script_directory}' has been written to '{output_text_file}'.")

--- End of directory_structure.py ---

# Location of directory_structure.txt

p1/
    .gitignore
    .notes
    app.py
    clear_ports.bat
    config.py
    dbt_project.yml
    directory_structure.py
    directory_structure.txt
    docker-compose.yml
    Dockerfile
    merged_output.txt
    merger.py
    package-lock.yml
    packages.yml
    README.md
    requirements.txt
    .vscode/
        settings.json
    data/
        airline-438510-25841398e32c.json
        build.log
        datamaker.py
        data_processing.py
        taipy_charts_examples.txt
        taipy_sample_code.txt
        test.ipynb
        logs/
            dbt.log
        models/
            average_airline_rating_by_year.sql
            average_profit_margin_by_class.sql
            avg_ticket_price_by_departure_city.sql
            customer_satisfaction_analysis.sql
            flight_duration_vs_ticket_price.sql
            market_share_by_airline.sql
            monthly_profit_trends.sql
            most_profitable_routes_by_year.sql
            profits_comparison_2022_2023.sql
            profit_and_flights_by_country.sql
            revenue_breakdown_by_class_type.sql
            revenue_by_country.sql
            seasonal_passenger_trends.sql
            top_destinations_by_passenger_volume.sql
            underperforming_flights.sql
        target/
            graph.gpickle
            graph_summary.json
            manifest.json
            partial_parse.msgpack
            run_results.json
            semantic_manifest.json
            compiled/
                p1/
                    models/
                        airlines_model.sql
                        average_airline_rating_by_year.sql
                        average_profit_margin_by_class.sql
                        avg_ticket_price_by_departure_city.sql
                        customer_satisfaction_analysis.sql
                        flight_duration_vs_ticket_price.sql
                        market_share_by_airline.sql
                        monthly_profit_trends.sql
                        most_profitable_routes_by_year.sql
                        profits_comparison_2022_2023.sql
                        profit_and_flights_by_country.sql
                        rating.sql
                        revenue_breakdown_by_class_type.sql
                        revenue_by_country.sql
                        seasonal_passenger_trends.sql
                        top5.sql
                        top_destinations_by_passenger_volume.sql
                        underperforming_flights.sql
            run/
                p1/
                    models/
                        airlines_model.sql
                        average_airline_rating_by_year.sql
                        average_profit_margin_by_class.sql
                        avg_ticket_price_by_departure_city.sql
                        customer_satisfaction_analysis.sql
                        flight_duration_vs_ticket_price.sql
                        market_share_by_airline.sql
                        monthly_profit_trends.sql
                        most_profitable_routes_by_year.sql
                        profits_comparison_2022_2023.sql
                        profit_and_flights_by_country.sql
                        rating.sql
                        revenue_breakdown_by_class_type.sql
                        revenue_by_country.sql
                        seasonal_passenger_trends.sql
                        top5.sql
                        top_destinations_by_passenger_volume.sql
                        underperforming_flights.sql
        __pycache__/
            data_processing.cpython-311.pyc
    dbt_packages/
        dbt_utils/
            .gitignore
            CHANGELOG.md
            CONTRIBUTING.md
            dbt_project.yml
            dev-requirements.txt
            docker-compose.yml
            LICENSE
            Makefile
            pytest.ini
            README.md
            RELEASE.md
            run_functional_test.sh
            run_test.sh
            supported_adapters.env
            tox.ini
            .circleci/
                config.yml
            .github/
                CODEOWNERS
                pull_request_template.md
                ISSUE_TEMPLATE/
                    bug_report.md
                    dbt_minor_release.md
                    feature_request.md
                    utils_minor_release.md
                workflows/
                    ci.yml
                    create-table-of-contents.yml
                    stale.yml
                    triage-labels.yml
            docs/
                decisions/
                    adr-0000-documenting-architecture-decisions.md
                    adr-0001-decision-record-format.md
                    adr-0002-cross-database-utils.md
                    README.md
            integration_tests/
                .gitignore
                dbt_project.yml
                package-lock.yml
                packages.yml
                profiles.yml
                README.md
                .env/
                    bigquery.env
                    postgres.env
                    redshift.env
                    snowflake.env
                data/
                    .gitkeep
                models/
                    datetime/
                        schema.yml
                        test_date_spine.sql
                    generic_tests/
                        equality_less_columns.sql
                        recency_time_excluded.sql
                        recency_time_included.sql
                        schema.yml
                        test_equal_column_subset.sql
                        test_equal_rowcount.sql
                        test_fewer_rows_than.sql
                    

--- End of directory_structure.txt ---

# Location of merged_output.txt

# Location of app.py

# app.py

import config 
from taipy import Gui
from data.data_processing import run_dbt, setup_bigquery_client
from pages.overview_page.overview_page import Overview
from pages.marketing_page.marketing_page import Marketing
from pages.root import Root

setup_bigquery_client() # step 1
# run_dbt() # step 2

# Page Structure
pages = {
    "/": Root,  # Root page redirects to overview
    "overview": Overview,
    "marketing": Marketing
}

gui = Gui(pages=pages)

if __name__ == "__main__":
    gui.run(title="Airline Dashboard", port=5000)
--- End of app.py ---

# Location of config.py

# config.py

from taipy import Config

PROJECT_ID = "airline-438510"
DATASET_ID = "airlines"
DBT_DATASET = f"{PROJECT_ID}.{DATASET_ID}"

# Configure the GUI
Config.configure_gui(
    name="Airline Dashboard",
    description="An overview and marketing dashboard for Airline Firm.",
    author="Raghavendra Tapas",
)

# Configure global application settings
Config.configure_global_app(
    dark_mode=False,
    navigation=True,
)

--- End of config.py ---

# Location of directory_structure.py

import os

def print_directory_structure(root_dir, output_file):
    with open(output_file, 'w', encoding='utf-8') as file:
        for root, dirs, files in os.walk(root_dir):
            # Calculate the indentation level
            level = root.replace(root_dir, '').count(os.sep)
            indent = ' ' * 4 * level
            # Write the directory name
            file.write(f"{indent}{os.path.basename(root)}/\n")
            # Write the file names
            sub_indent = ' ' * 4 * (level + 1)
            for f in files:
                file.write(f"{sub_indent}{f}\n")

if __name__ == "__main__":
    # Get the directory where this script is located
    script_directory = os.path.dirname(os.path.abspath(__file__))
    
    # Specify the output text file path (placed in the same directory)
    output_text_file = os.path.join(script_directory, "directory_structure.txt")
    
    print_directory_structure(script_directory, output_text_file)
    print(f"Directory structure of '{script_directory}' has been written to '{output_text_file}'.")

--- End of directory_structure.py ---

# Location of directory_structure.txt

p1/
    .gitignore
    .notes
    app.py
    clear_ports.bat
    config.py
    dbt_project.yml
    directory_structure.py
    directory_structure.txt
    docker-compose.yml
    Dockerfile
    merged_output.txt
    merger.py
    package-lock.yml
    packages.yml
    README.md
    requirements.txt
    .vscode/
        settings.json
    data/
        airline-438510-25841398e32c.json
        build.log
        datamaker.py
        data_processing.py
        taipy_charts_examples.txt
        taipy_sample_code.txt
        test.ipynb
        logs/
            dbt.log
        models/
            average_airline_rating_by_year.sql
            average_profit_margin_by_class.sql
            avg_ticket_price_by_departure_city.sql
            customer_satisfaction_analysis.sql
            flight_duration_vs_ticket_price.sql
            market_share_by_airline.sql
            monthly_profit_trends.sql
            most_profitable_routes_by_year.sql
            profits_comparison_2022_2023.sql
            profit_and_flights_by_country.sql
            revenue_breakdown_by_class_type.sql
            revenue_by_country.sql
            seasonal_passenger_trends.sql
            top_destinations_by_passenger_volume.sql
            underperforming_flights.sql
        target/
            graph.gpickle
            graph_summary.json
            manifest.json
            partial_parse.msgpack
            run_results.json
            semantic_manifest.json
            compiled/
                p1/
                    models/
                        airlines_model.sql
                        average_airline_rating_by_year.sql
                        average_profit_margin_by_class.sql
                        avg_ticket_price_by_departure_city.sql
                        customer_satisfaction_analysis.sql
                        flight_duration_vs_ticket_price.sql
                        market_share_by_airline.sql
                        monthly_profit_trends.sql
                        most_profitable_routes_by_year.sql
                        profits_comparison_2022_2023.sql
                        profit_and_flights_by_country.sql
                        rating.sql
                        revenue_breakdown_by_class_type.sql
                        revenue_by_country.sql
                        seasonal_passenger_trends.sql
                        top5.sql
                        top_destinations_by_passenger_volume.sql
                        underperforming_flights.sql
            run/
                p1/
                    models/
                        airlines_model.sql
                        average_airline_rating_by_year.sql
                        average_profit_margin_by_class.sql
                        avg_ticket_price_by_departure_city.sql
                        customer_satisfaction_analysis.sql
                        flight_duration_vs_ticket_price.sql
                        market_share_by_airline.sql
                        monthly_profit_trends.sql
                        most_profitable_routes_by_year.sql
                        profits_comparison_2022_2023.sql
                        profit_and_flights_by_country.sql
                        rating.sql
                        revenue_breakdown_by_class_type.sql
                        revenue_by_country.sql
                        seasonal_passenger_trends.sql
                        top5.sql
                        top_destinations_by_passenger_volume.sql
                        underperforming_flights.sql
        __pycache__/
            data_processing.cpython-311.pyc
    dbt_packages/
        dbt_utils/
            .gitignore
            CHANGELOG.md
            CONTRIBUTING.md
            dbt_project.yml
            dev-requirements.txt
            docker-compose.yml
            LICENSE
            Makefile
            pytest.ini
            README.md
            RELEASE.md
            run_functional_test.sh
            run_test.sh
            supported_adapters.env
            tox.ini
            .circleci/
                config.yml
            .github/
                CODEOWNERS
                pull_request_template.md
                ISSUE_TEMPLATE/
                    bug_report.md
                    dbt_minor_release.md
                    feature_request.md
                    utils_minor_release.md
                workflows/
                    ci.yml
                    create-table-of-contents.yml
                    stale.yml
                    triage-labels.yml
            docs/
                decisions/
                    adr-0000-documenting-architecture-decisions.md
                    adr-0001-decision-record-format.md
                    adr-0002-cross-database-utils.md
                    README.md
            integration_tests/
                .gitignore
                dbt_project.yml
                package-lock.yml
                packages.yml
                profiles.yml
                README.md
                .env/
                    bigquery.env
                    postgres.env
                    redshift.env
                    snowflake.env
                data/
                    .gitkeep
                    datetime/
                        data_date_spine.csv
                    etc/
                        data_people.csv
                    geo/
                        data_haversine_km.csv
                        data_haversine_mi.csv
                    schema_tests/
                        data_cardinality_equality_a.csv
                        data_cardinality_equality_b.csv
                        data_not_null_proportion.csv
                        data_test_accepted_range.csv
                        data_test_at_least_one.csv
                        data_test_equality_a.csv
                        data_test_equality_b.csv
                        data_test_equality_floats_a.csv
                        data_test_equality_floats_b.csv
                        data_test_equality_floats_columns_a.csv
                        data_test_equality_floats_columns_b.csv
                        data_test_equal_rowcount.csv
                        data_test_expression_is_true.csv
                        data_test_fewer_rows_than_table_1.csv
                        data_test_fewer_rows_than_table_2.csv
                        data_test_mutually_exclusive_ranges_no_gaps.csv
                        data_test_mutually_exclusive_ranges_with_gaps.csv
                        data_test_mutually_exclusive_ranges_with_gaps_zero_length.csv
                        data_test_not_accepted_values.csv
                        data_test_not_constant.csv
                        data_test_relationships_where_table_1.csv
                        data_test_relationships_where_table_2.csv
                        data_test_sequential_timestamps.csv
                        data_test_sequential_values.csv
                        data_unique_combination_of_columns.csv
                        schema.yml
                    sql/
                        data_deduplicate.csv
                        data_deduplicate_expected.csv
                        data_events_20180101.csv
                        data_events_20180102.csv
                        data_events_20180103.csv
                        data_filtered_columns_in_relation.csv
                        data_filtered_columns_in_relation_expected.csv
                        data_generate_series.csv
                        data_generate_surrogate_key.csv
                        data_get_column_values.csv
                        data_get_column_values_dropped.csv
                        data_get_column_values_where.csv
                        data_get_column_values_where_expected.csv
                        data_get_query_results_as_dict.csv
                        data_get_single_value.csv
                        data_nullcheck_table.csv
                        data_pivot.csv
                        data_pivot_expected.csv
                        data_pivot_expected_apostrophe.csv
                        data_safe_add.csv
                        data_safe_divide.csv
                        data_safe_divide_denominator_expressions.csv
                        data_safe_divide_numerator_expressions.csv
                        data_safe_subtract.csv
                        data_star.csv
                        data_star_aggregate.csv
                        data_star_aggregate_expected.csv
                        data_star_expected.csv
                        data_star_prefix_suffix_expected.csv
                        data_star_quote_identifiers.csv
                        data_union_events_expected.csv
                        data_union_exclude_expected.csv
                        data_union_expected.csv
                        data_union_table_1.csv
                        data_union_table_2.csv
                        data_unpivot.csv
                        data_unpivot_bool.csv
                        data_unpivot_bool_expected.csv
                        data_unpivot_expected.csv
                        data_unpivot_original_api_expected.csv
                        data_unpivot_quote.csv
                        data_unpivot_quote_expected.csv
                        data_width_bucket.csv
                    web/
                        data_urls.csv
                        data_url_host.csv
                        data_url_path.csv
                macros/
                    .gitkeep
                    assert_equal_values.sql
                    limit_zero.sql
                    tests.sql
                models/
                    datetime/
                        schema.yml
                        test_date_spine.sql
                    generic_tests/
                        equality_less_columns.sql
                        recency_time_excluded.sql
                        recency_time_included.sql
                        schema.yml
                        test_equal_column_subset.sql
                        test_equal_rowcount.sql
                        test_fewer_rows_than.sql
                    geo/
                        schema.yml
                        test_haversine_distance_km.sql
                        test_haversine_distance_mi.sql
                    sql/
                        schema.yml
                        test_deduplicate.sql
                        test_generate_series.sql
                        test_generate_surrogate_key.sql
                        test_get_column_values.sql
                        test_get_column_values_where.sql
                        test_get_filtered_columns_in_relation.sql
                        test_get_relations_by_pattern.sql
                        test_get_relations_by_prefix_and_union.sql
                        test_get_single_value.sql
                        test_get_single_value_default.sql
                        test_groupby.sql
                        test_not_empty_string_failing.sql
                        test_not_empty_string_passing.sql
                        test_nullcheck_table.sql
                        test_pivot.sql
                        test_pivot_apostrophe.sql
                        test_safe_add.sql
                        test_safe_divide.sql
                        test_safe_subtract.sql
                        test_star.sql
                        test_star_aggregate.sql
                        test_star_no_columns.sql
                        test_star_prefix_suffix.sql
                        test_star_quote_identifiers.sql
                        test_star_uppercase.sql
                        test_union.sql
                        test_union_base.sql
                        test_union_exclude_base_lowercase.sql
                        test_union_exclude_base_uppercase.sql
                        test_union_exclude_lowercase.sql
                        test_union_exclude_uppercase.sql
                        test_union_no_source_column.sql
                        test_union_where.sql
                        test_union_where_base.sql
                        test_unpivot.sql
                        test_unpivot_bool.sql
                        test_unpivot_quote.sql
                        test_width_bucket.sql
                    web/
                        schema.yml
                        test_urls.sql
                        test_url_host.sql
                        test_url_path.sql
                tests/
                    assert_get_query_results_as_dict_objects_equal.sql
                    generic/
                        expect_table_columns_to_match_set.sql
                    jinja_helpers/
                        assert_pretty_output_msg_is_string.sql
                        assert_pretty_time_is_string.sql
                        test_slugify.sql
                    sql/
                        test_get_column_values_use_default.sql
                        test_get_single_value_multiple_rows.sql
            macros/
                generic_tests/
                    accepted_range.sql
                    at_least_one.sql
                    cardinality_equality.sql
                    equality.sql
                    equal_rowcount.sql
                    expression_is_true.sql
                    fewer_rows_than.sql
                    mutually_exclusive_ranges.sql
                    not_accepted_values.sql
                    not_constant.sql
                    not_empty_string.sql
                    not_null_proportion.sql
                    recency.sql
                    relationships_where.sql
                    sequential_values.sql
                    unique_combination_of_columns.sql
                jinja_helpers/
                    log_info.sql
                    pretty_log_format.sql
                    pretty_time.sql
                    slugify.sql
                    _is_ephemeral.sql
                    _is_relation.sql
                sql/
                    date_spine.sql
                    deduplicate.sql
                    generate_series.sql
                    generate_surrogate_key.sql
                    get_column_values.sql
                    get_filtered_columns_in_relation.sql
                    get_query_results_as_dict.sql
                    get_relations_by_pattern.sql
                    get_relations_by_prefix.sql
                    get_single_value.sql
                    get_tables_by_pattern_sql.sql
                    get_tables_by_prefix_sql.sql
                    get_table_types_sql.sql
                    groupby.sql
                    haversine_distance.sql
                    nullcheck.sql
                    nullcheck_table.sql
                    pivot.sql
                    safe_add.sql
                    safe_divide.sql
                    safe_subtract.sql
                    star.sql
                    surrogate_key.sql
                    union.sql
                    unpivot.sql
                    width_bucket.sql
                web/
                    get_url_host.sql
                    get_url_parameter.sql
                    get_url_path.sql
    logs/
        dbt.log
    pages/
        root.md
        root.py
        marketing_page/
            marketing_page.py
            __pycache__/
                marketing_page.cpython-311.pyc
        overview_page/
            overview_page.py
            __pycache__/
                overview_page.cpython-311.pyc
        __pycache__/
            marketing_page.cpython-311.pyc
            overview_page.cpython-311.pyc
            root.cpython-311.pyc
    target/
        graph.gpickle
        graph_summary.json
        manifest.json
        partial_parse.msgpack
        run_results.json
        semantic_manifest.json
    __pycache__/
        config.cpython-311.pyc

--- End of merged_output.txt ---

# Location of merger.py

import os

# Specify the file extensions you want to include
file_extensions = ['.py', '.md', '.txt']

# Specify the output file where all the content will be merged
output_file = 'merged_output.txt'

def is_important_file(file):
    """Check if the file has one of the important extensions."""
    return any(file.endswith(ext) for ext in file_extensions)

def merge_files_into_one(repo_dir, output_file):
    """Walk through the directory and merge important files into one."""
    with open(output_file, 'w') as outfile:
        # Walk through the directory recursively
        for root, dirs, files in os.walk(repo_dir):
            for file in files:
                # Check if the file is important
                if is_important_file(file):
                    file_path = os.path.join(root, file)
                    relative_path = os.path.relpath(file_path, repo_dir)
                    try:
                        # Read and append file contents to the output file
                        with open(file_path, 'r', encoding='utf-8') as infile:
                            # Write the relative file path as a header
                            outfile.write(f"# Location of {relative_path}\n\n")
                            outfile.write(infile.read())
                            outfile.write(f"\n--- End of {relative_path} ---\n\n")
                    except Exception as e:
                        print(f"Error reading {file_path}: {e}")

if __name__ == "__main__":
    # Specify the directory where your GitHub repo is located
    repo_dir = os.path.abspath(os.path.dirname(__file__))  # Modify this if needed
    merge_files_into_one(repo_dir, output_file)
    print(f"All important files have been merged into {output_file}")

--- End of merger.py ---

# Location of data\data_processing.py

# data/data_processing.py

import os
from pathlib import Path
from google.cloud import bigquery
from config import DBT_DATASET

def setup_bigquery_client():
    try:
        script_directory = Path(__file__).parent.resolve()
        credentials_path = script_directory / "airline-438510-25841398e32c.json"
        
        if not credentials_path.exists():
            raise FileNotFoundError(f"Credentials file not found at {credentials_path}")
        
        if "GOOGLE_APPLICATION_CREDENTIALS" in os.environ:
            del os.environ["GOOGLE_APPLICATION_CREDENTIALS"]
        
        os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = str(credentials_path)

        client = bigquery.Client()
        print("BigQuery Setup Complete...")
        return client
    except Exception as e:
        print(f"BigQuery Error ---> {e}")

def get_dataframe(model_name):
    """
    Fetch data from BigQuery
    """
    try:
        client = bigquery.Client()
        table_name = f"""{DBT_DATASET}.{model_name}"""
        query = f"""SELECT * FROM {table_name}"""
        return client.query(query).to_dataframe()
    except Exception as e:
        print(f"BigQuery Error ---> {e}")


def run_dbt():
    os.system("dbt run")


--- End of data\data_processing.py ---
# Location of pages\root.md

<style>
  .navbar {
    text-align: center;
    margin-bottom: 20px;
  }
  .navbar a {
    margin: 0 15px;
    font-size: 18px;
    text-decoration: none;
    color: black;
  }
  .navbar a:hover {
    color: blue;
  }
</style>

<div class="navbar">
  <a href="/overview">Overview</a>
  <a href="/marketing">Marketing</a>
</div>

<button onclick="call(toggle_mode)">Switch to {{ 'Dark' if not state.dark_mode else 'Light' }} Mode</button>


# Welcome to the Airline Dashboard

This dashboard will help you track airline performance metrics and marketing data. Use the navigation above to access different sections.

--- End of pages\root.md ---

# Location of pages\root.py

from taipy.gui import Markdown

Root = Markdown("pages/root.md")

--- End of pages\root.py ---

# Location of pages\marketing_page\marketing_page.py

# pages/marketing_page.py

from taipy.gui import Markdown
from data.data_processing import get_dataframe


m1 = get_dataframe('top_destinations_by_passenger_volume')
m2 = get_dataframe('avg_ticket_price_by_departure_city')
m3 = get_dataframe('revenue_breakdown_by_class_type')
m4 = get_dataframe('seasonal_passenger_trends')
m5 = get_dataframe('customer_satisfaction_analysis')

print("Fetched dataframe for Marketing Page")


# Markdown content for the marketing page
marketing_md = """
# Marketing Page

## Top Destinations by Passenger Volume
<|{m1}|table|>
<!--- <|{m1}|chart|type=bar|x=destination|y=passenger_volume|> --->

## Average Ticket Price by Departure City
<|{m2}|table|>
<!--- <|{m2}|chart|type=bar|x=departure_city|y=average_ticket_price|> --->

## Revenue Breakdown by Class Type
<|{m3}|table|>
<!--- <|{m3}|chart|type=pie|values=revenue|labels=class_type|> --->

## Seasonal Passenger Trends
<|{m4}|table|>
<!--- <|{m4}|chart|type=line|x=month|y=passenger_count|> --->

## Customer Satisfaction Analysis
<|{m5}|table|>
"""

Marketing = Markdown(marketing_md)

--- End of pages\marketing_page\marketing_page.py ---

# Location of pages\overview_page\overview_page.py

from taipy.gui import Markdown
from data.data_processing import get_dataframe

# Get the dataframes
o1 = get_dataframe('market_share_by_airline')
o2 = get_dataframe('most_profitable_routes_by_year')
o3 = get_dataframe('average_profit_margin_by_class')
o4 = get_dataframe('monthly_profit_trends')
o5 = get_dataframe('average_airline_rating_by_year')
o6 = get_dataframe('market_share_by_airline')

print("Fetched dataframes for Overview Page")

overview_md = """
# Overview Page

## Market Share by Airlines
<|{o1}|table|>
<!--- <|{o1}|chart|type=pie|values=market_share|labels=airline_name|> --->

## Most Profitable Routes Year Wise
<|{o2}|table|>
<!--- <|{o2}|chart|type=bar|x=departure_city|y=profit|color=year|> --->

## Average Profit Margin by Class Type
<|{o3}|table|>
<!--- <|{o3}|chart|type=bar|x=class_type|y=average_profit_margin|> --->

## Monthly Profit Trends
<|{o4}|table|>
<!--- <|{o4}|chart|type=line|x=month|y=profit|> --->

## Average Airline Rating Comparison by Year
<|{o5}|table|>
<!--- <|{o5}|chart|type=line|x=year|y=avg_rating|> --->
"""

Overview = Markdown(overview_md)

--- End of pages\overview_page\overview_page.py ---

